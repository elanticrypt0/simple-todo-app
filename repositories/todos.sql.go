// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package repositories

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos (id, title, completed, created_at) VALUES (?, ?, ?, ?)
`

type CreateTodoParams struct {
	ID        string       `db:"id" json:"id"`
	Title     string       `db:"title" json:"title"`
	Completed bool         `db:"completed" json:"completed"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Completed,
		arg.CreatedAt,
	)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, title, completed, created_at FROM todos ORDER BY created_at DESC
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, completed, created_at FROM todos WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodoByID(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos SET title = ?, completed = ? WHERE id = ?
`

type UpdateTodoParams struct {
	Title     string `db:"title" json:"title"`
	Completed bool   `db:"completed" json:"completed"`
	ID        string `db:"id" json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.Title, arg.Completed, arg.ID)
	return err
}
